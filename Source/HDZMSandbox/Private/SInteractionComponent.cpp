// Fill out your copyright notice in the Description page of Project Settings.


#include "SInteractionComponent.h"
#include <SGamePlayInterface.h>
#include "DrawDebugHelpers.h"

// Sets default values for this component's properties
USInteractionComponent::USInteractionComponent()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;

	// ...

}



// Called when the game starts
void USInteractionComponent::BeginPlay()
{
	Super::BeginPlay();

	// ...
	
}


// Called every frame
void USInteractionComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	// ...
}


void USInteractionComponent::PrimaryInteraction()
{
	//find interactable actor
	AActor* owner = GetOwner();
	float radiance = 400; //2m

	FRotator eyeRotator;
	FVector eyeLocation;
	owner->GetActorEyesViewPoint(eyeLocation, eyeRotator);
	//you can find whats eyeRotator in the PawnVer implementation;

	FVector end;
	end = eyeLocation + (eyeRotator.Vector() * radiance);

	FCollisionObjectQueryParams queryParams;
	queryParams.AddObjectTypesToQuery(ECC_WorldDynamic);

	//the last of hits is the nearest hit;
	TArray<FHitResult> hits;

	float radius = 30.f;

	//use sphere to explore the interactive scope
	FCollisionShape collisionSphere;
	collisionSphere.SetSphere(radius);

	//view:https://docs.unrealengine.com/5.1/en-US/API/Runtime/Engine/Engine/UWorld/SweepMultiByObjectType/
	//another: GetWorld()->LineTraceMultiByObjectType() :singal light trace and return 1 hit
	//FQuat::Identity : empty rotate . Dont rotate collisionshape

	bool bBlockingHit = GetWorld()->SweepMultiByObjectType(hits,eyeLocation, end,FQuat::Identity ,queryParams,collisionSphere);
	FColor LineColor = bBlockingHit ? FColor::Green : FColor::Red;
	for (auto hit : hits)
	{
	//do interaction response

		AActor* hitActor = hit.GetActor();
		if (hitActor)
		{
			//remeber use U
			if (hitActor->Implements<USGamePlayInterface>())
			{
				//it is safe Cast ,don't need check
				APawn* ownerPawn = Cast<APawn>(owner);

				//Execute_InterfaceMethodName; generated by ue;
				ISGamePlayInterface::Execute_Interact(hitActor, ownerPawn);

			};
		};
		DrawDebugSphere(GetWorld(), hit.Location, radius,16, LineColor, false, 2.f);
		//segments: faces count
		//hit.ImpactPoint: actrually collision point in world
		//hit.Location: shape location(center)
	}

	DrawDebugLine(GetWorld(),eyeLocation,end,LineColor,false,2.f);


}

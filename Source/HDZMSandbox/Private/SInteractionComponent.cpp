// Fill out your copyright notice in the Description page of Project Settings.


#include "SInteractionComponent.h"
#include <SGamePlayInterface.h>
#include "DrawDebugHelpers.h"
#include "Blueprint/UserWidget.h"
#include "SWorldUserWidget.h"


static TAutoConsoleVariable<bool> CvarDrawDebugInteraction(TEXT("su.DrawDebugInteraction"), false, TEXT("Enable Draw Debug lines for Interactions Component."), ECVF_Cheat);


// Sets default values for this component's properties
USInteractionComponent::USInteractionComponent()
{
	PrimaryComponentTick.bCanEverTick = true;

	TraceRadius = 50.f;
	TraceLength = 300.f;
	collisionChannel = ECC_WorldDynamic;


}





// Called when the game starts
void USInteractionComponent::BeginPlay()
{
	Super::BeginPlay();

	
}


// Called every frame
void USInteractionComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);
	FindBestInteractionActor();
	// ...
}


void USInteractionComponent::FindBestInteractionActor()
{
	bool bDrawDebug = CvarDrawDebugInteraction.GetValueOnGameThread();


	//find interactable actor
	AActor* owner = GetOwner();
	

	FRotator eyeRotator;
	FVector eyeLocation;
	owner->GetActorEyesViewPoint(eyeLocation, eyeRotator);
	//you can find whats eyeRotator in the PawnVer implementation;

	FVector end;
	end = eyeLocation + (eyeRotator.Vector() *TraceLength);

	FCollisionObjectQueryParams queryParams;
	queryParams.AddObjectTypesToQuery(collisionChannel);

	//the last of hits is the nearest hit;
	TArray<FHitResult> hits;


	//use sphere to explore the interactive scope
	FCollisionShape collisionSphere;
	collisionSphere.SetSphere(TraceRadius);

	//view:https://docs.unrealengine.com/5.1/en-US/API/Runtime/Engine/Engine/UWorld/SweepMultiByObjectType/
	//another: GetWorld()->LineTraceMultiByObjectType() :singal light trace and return 1 hit
	//FQuat::Identity : empty rotate . Dont rotate collisionshape

	FocusActor = nullptr;

	bool bBlockingHit = GetWorld()->SweepMultiByObjectType(hits, eyeLocation, end, FQuat::Identity, queryParams, collisionSphere);
	FColor LineColor = bBlockingHit ? FColor::Green : FColor::Red;
	for (auto hit : hits)
	{
		//do interaction response
		AActor* hitActor = hit.GetActor();

		if (bDrawDebug)
			DrawDebugSphere(GetWorld(), hit.Location, TraceRadius, 16, LineColor, false, 2.f);

		//segments: faces count
		//hit.ImpactPoint: actrually collision point in world
		//hit.Location: shape location(center)

		if (hitActor)
		{
			//remeber use U
			if (hitActor->Implements<USGamePlayInterface>())
			{
				FocusActor = hitActor;

			};
		};
	}

//@MayNeedFix: Add InfoWidget to ViewPorrt
	if (FocusActor)
	{
		if (DefaultWidgetInstance == nullptr&& ensure(DefaultWidgetClass))
		{
			DefaultWidgetInstance = CreateWidget<USWorldUserWidget>(GetWorld(), DefaultWidgetClass);
		}
		if (DefaultWidgetInstance )
		{
			DefaultWidgetInstance->AttachedActor = FocusActor;
			if( !DefaultWidgetInstance->IsInViewport())
				DefaultWidgetInstance->AddToViewport();
		}

	}
	else
	{
		if(DefaultWidgetInstance)
			DefaultWidgetInstance->RemoveFromParent();
		//DefaultWidgetInstance will return to nullptr autoly
	}


	if (bDrawDebug)
		DrawDebugLine(GetWorld(), eyeLocation, end, LineColor, false, 0.f);
}

void USInteractionComponent::PrimaryInteraction()
{

	ServerInteraction(FocusActor);
}

void USInteractionComponent::ServerInteraction_Implementation(AActor* FoActor)
{
	//it is safe Cast ,don't need check
	APawn* ownerPawn = Cast<APawn>(GetOwner());

	//Execute_InterfaceMethodName; generated by ue;
	if (FoActor)
		ISGamePlayInterface::Execute_Interact(FoActor, ownerPawn);

	else
	{
		UE_LOG(LogTemp, Warning, TEXT("FocusActor is Nullptr"));
	}
}